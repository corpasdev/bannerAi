name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run tests
      run: npm run test:ci
    
    - name: Build project
      run: npm run build
    
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  deploy-staging:
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: test
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for staging
      run: npm run build:staging
      env:
        VITE_FIREBASE_API_KEY_STAGING: ${{ secrets.VITE_FIREBASE_API_KEY_STAGING }}
        VITE_FIREBASE_AUTH_DOMAIN_STAGING: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN_STAGING }}
        VITE_FIREBASE_PROJECT_ID_STAGING: ${{ secrets.VITE_FIREBASE_PROJECT_ID_STAGING }}
        VITE_FIREBASE_STORAGE_BUCKET_STAGING: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET_STAGING }}
        VITE_FIREBASE_MESSAGING_SENDER_ID_STAGING: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID_STAGING }}
        VITE_FIREBASE_APP_ID_STAGING: ${{ secrets.VITE_FIREBASE_APP_ID_STAGING }}
        VITE_FIREBASE_MEASUREMENT_ID_STAGING: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID_STAGING }}
    
    - name: Deploy to Firebase Hosting (Staging)
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}'
        projectId: '${{ secrets.FIREBASE_PROJECT_ID_STAGING }}'
        channelId: staging

  deploy-production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: test
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: npm run build:production
      env:
        VITE_FIREBASE_API_KEY_PROD: ${{ secrets.VITE_FIREBASE_API_KEY_PROD }}
        VITE_FIREBASE_AUTH_DOMAIN_PROD: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN_PROD }}
        VITE_FIREBASE_PROJECT_ID_PROD: ${{ secrets.VITE_FIREBASE_PROJECT_ID_PROD }}
        VITE_FIREBASE_STORAGE_BUCKET_PROD: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET_PROD }}
        VITE_FIREBASE_MESSAGING_SENDER_ID_PROD: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID_PROD }}
        VITE_FIREBASE_APP_ID_PROD: ${{ secrets.VITE_FIREBASE_APP_ID_PROD }}
        VITE_FIREBASE_MEASUREMENT_ID_PROD: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID_PROD }}
    
    - name: Deploy to Firebase Hosting (Production)
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}'
        projectId: '${{ secrets.FIREBASE_PROJECT_ID_PROD }}'
        channelId: live

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Run dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'flashes'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: reports/ 